#!/usr/bin/env python

KANO_LISTS = "/etc/apt/sources.list.d/kano.list"
APT_LISTS_CACHE = "/var/lib/apt/lists/"

DEBUG = False

import os
import sys
import re
from kano.utils import get_dpkg_dict, run_cmd

def debug_print(msg):
    sys.stderr.write("DEBUG: " + msg + "\n")

# Check whether there"s something running
#   based on the recent CPU utilisation
#

# Download recent kano repo Package lists
cmd = ("sudo apt-get update -o Dir::Etc::sourcelist='{}' " + \
      "-o Dir::Etc::sourceparts'=-' " + \
      "-o APT::Get::List-Cleanup='0'").format(KANO_LISTS)
_, _, rc = run_cmd(cmd)
if rc != 0:
    # TODO: Schedule the update for later on
    sys.exit()

# Get versions of all the packages in the repo
pkgs_ok, pkgs_err = get_dpkg_dict()
installed_pkgs = dict(pkgs_ok.items() + pkgs_err.items())

# Parse the list and compare with the dict and
list_files = os.listdir(APT_LISTS_CACHE)
kano_pkg_lists = filter(lambda f: re.search(r"kano", f) and \
                                  re.search(r"Packages$", f), list_files)

# Parse the package list
pkg_list = {}
for pkg_list_filename in kano_pkg_lists:
    with open(APT_LISTS_CACHE + pkg_list_filename, "r") as pkg_list_file:
        package = None
        version = None
        for line in pkg_list_file.readlines():
            if re.match("Package: ", line):
                package = line[9:-1]
            elif re.match("Version: ", line):
                version = line[9:-1]

                if package is None:
                    raise Exception("Malformed package lists")
                else:
                    if package not in pkg_list or \
                       (package in pkg_list and version > pkg_list[package]):
                        pkg_list[package] = version

                package = None
                version = None

# Compare the package list to dpkg -l
#
# NOTE: It should be done the other way around (loop over all the packages
# and check whether there is a newer version for any o
for pkg, version in installed_pkgs.iteritems():
    if pkg in pkg_list and version < pkg_list[pkg]:
        debug_print("Updates available")
        sys.exit(0)

debug_print("No updates detected")
sys.exit(1)
