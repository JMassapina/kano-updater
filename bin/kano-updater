#!/usr/bin/env python

# kano-updater
#
# Copyright (C) 2014 Kano Computing Ltd.
# License: http://www.gnu.org/licenses/gpl-2.0.txt GNU General Public License v2
#
# Updates system packages, Python modules and expands root partition if needed
#

import os
import sys
import time

if __name__ == '__main__' and __package__ is None:
    dir_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
    if dir_path != '/usr':
        sys.path.insert(0, dir_path)

from kano.network import is_internet
from kano_updater.osversion import OSVersion, bump_system_version
from kano_updater.stages import upgrade_debian, upgrade_python
from kano_updater.utils import get_dpkg_dict, set_update_status, fix_broken, \
    expand_rootfs, get_installed_version
from kano.utils import zenity_show_progress, run_print_output_error, kill_child_processes, \
    run_cmd, delete_file, is_gui, read_file_contents, get_date_now

debug = False

issue_file = "/etc/issue"
version_file = "/etc/kanux_version"

new_version = OSVersion("Kanux", "Beta", "1.1")
if os.path.exists(version_file):
    old_version = OSVersion.from_version_file(version_file)
else:
    old_version = OSVersion("Kanux", "init", "0.0")

err_log_file = '/var/log/kano-updater-log'
python_modules_file = '/usr/share/kano-updater/python_modules'
pre_update_file = '/usr/share/kano-updater/pre_update'
post_update_file = '/usr/share/kano-updater/post_update'

is_gui = is_gui()
kanux_version = read_file_contents('/etc/kanux_version')
err_log = 'build version: {}\nupgrade date: {}\n'.format(
    kanux_version,
    get_date_now()
)

# root check
user = os.environ['LOGNAME']
if user != 'root':
    msg = 'Error: kano-updater must be executed with root privileges'
    if is_gui:
        run_cmd('zenity --info --text "{}"'.format(msg))
    sys.exit(msg)

# upgrade python command line
if len(sys.argv) == 2 and sys.argv[1] == 'python_upgrade':
    appstate_before, _ = get_dpkg_dict()
    upgrade_python(python_modules_file)
    sys.exit()

# ask confirmation from user
if not (len(sys.argv) == 2 and sys.argv[1] in ['-f', '--force']):
    msg = "Are you sure you want to update Kanux?"
    if is_gui:
        _, _, rc = run_cmd('zenity --question --text "{}"'.format(msg))
        if rc != 0:
            sys.exit()
    else:
        print msg + " [y/n]"
        answer = raw_input().lower()
        if answer != 'y':
            sys.exit()

if len(sys.argv) == 2 and sys.argv[1] in ['-d', '--debug']:
    debug = True

# no internet warning
if not is_internet():
    msg = "No internet connection detected\n\n"
    msg += "Please connect to internet using the cable\n"
    msg += "or the WiFi utility in Extras"
    if is_gui:
        run_cmd('zenity --info --text "{}"'.format(msg))
    else:
        print msg
        print 'Press any key to continue'
        answer = raw_input()
# do upgrade
else:
    # kill_apps
    kill_apps_list = ['minecraft-pi', 'make-music', 'make-video',
                      'make-snake', 'kano-extras']
    for app in kill_apps_list:
        run_cmd('killall -q {}'.format(app))

    progress_bar = zenity_show_progress("Downloading package lists")
    run_print_output_error('apt-get -y update')
    kill_child_processes(progress_bar)

    # upgrade kano-updater itself
    progress_bar = zenity_show_progress("Updating the updater itself")
    current_updater_version = get_installed_version('kano-updater')
    run_cmd('apt-get install -o Dpkg::Options::="--force-confdef" ' +
            '-o Dpkg::Options::="--force-confold" -y --force-yes kano-updater')
    new_updater_version = get_installed_version('kano-updater')
    kill_child_processes(progress_bar)

    # re-run the updater in case it was updated
    if new_updater_version != current_updater_version and not debug:
        os.execvp('kano-updater', ['kano-updater', '-f'])

    # get app-state before upgrading
    appstate_before, _ = get_dpkg_dict()

    # pre upgrade
    preup_cmd = "{} '{}' '{}'".format(pre_update_file,
                                      old_version.to_version_string(),
                                      new_version.to_version_string())
    run_print_output_error(preup_cmd)

    # upgrade python
    python_ok, python_err = upgrade_python(python_modules_file, appstate_before)

    # upgrade debian
    debian_err_packages, log = upgrade_debian()
    err_log += log

    # post upgrade
    postup_cmd = "{} '{}' '{}'".format(post_update_file,
                                       old_version.to_version_string(),
                                       new_version.to_version_string())
    run_print_output_error(postup_cmd)

    bump_system_version(new_version, version_file, issue_file)

    now = int(time.time())
    status = {"last_update": now, "update_available": 0, "last_check": now}
    set_update_status(status)

    # get app-state after upgrading
    appstate_after, appstate_after_nonclean = get_dpkg_dict()

    msg_upgraded = ''
    msg_added = ''
    msg_removed = ''

    # compare appstates
    for app, version in appstate_after.iteritems():
        if app in appstate_before and version != appstate_before[app]:
            msg_upgraded += "{}: {} -> {}\n".format(
                app,
                appstate_before[app],
                version
            )

        if app not in appstate_before:
            msg_added += "{}: {}\n".format(app, version)

    for app, version in appstate_before.iteritems():
        if app not in appstate_after:
            msg_removed += "{}\n".format(app)

    msg = ''
    if msg_upgraded:
        msg += "* apps upgraded:\n" + msg_upgraded

    if msg_added:
        msg += "* apps added:\n" + msg_added

    if msg_removed:
        msg += "* apps removed:\n" + msg_removed

    if debian_err_packages:
        msg += "* apps with errors:\n{}\n".format('\n'.join(debian_err_packages))

    if appstate_after_nonclean:
        non_clean_list = '\n'.join(appstate_after_nonclean.iterkeys())
        msg += "* apps with non-clean state:\n{}\n".format(non_clean_list)

    if python_ok:
        msg += "* python modules upgraded:\n{}\n".format('\n'.join(python_ok))

    if python_err:
        err_list = '\n'.join(python_err)
        msg += "* python modules with error:\n{}\n".format(err_list)
    if not msg:
        msg = "No updates needed this time."

    # write error log
    err_log += '\n' + msg + '\n'
    with open(err_log_file, 'w') as outfile:
        outfile.write(err_log)

    if is_gui:
        with open('msg', 'w') as outfile:
            outfile.write(msg)
        run_cmd('zenity --text-info --title="Update result" --filename=msg')
        delete_file('msg')
    else:
        print msg
        print 'Press any key to continue'
        answer = raw_input()

# expand filesystem
if expand_rootfs():
    msg = "Disk partition scheduled for resize.\n"
    msg += "Rebooting the system, see you in 1 minute!"
    if is_gui:
        run_cmd('zenity --info --text "{}"'.format(msg))
    else:
        print msg
        print 'Press any key to continue'
        answer = raw_input()
    run_cmd('reboot')
