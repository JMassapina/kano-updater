#!/usr/bin/env python

# kano-updater
#
# Copyright (C) 2014 Kano Computing Ltd.
# License: http://www.gnu.org/licenses/gpl-2.0.txt GNU General Public License v2
#
# Updates system packages, Python modules and expands root partition if needed
# Usage:
# sudo kano-updater > shows confirmation and reboot dialogue
# sudo kano-updater -f > shows reboot dialogue
# sudo kano-updater -n > no dialogues
# sudo kano-updater -d > debug mode
# sudo kano-updater python_upgrade > upgrade python command line

import os
import sys
import time

if __name__ == '__main__' and __package__ is None:
    dir_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
    if dir_path != '/usr':
        sys.path.insert(0, dir_path)

from kano.logging import logger, cleanup
from kano.network import is_internet
from kano_updater.osversion import OSVersion, bump_system_version
from kano_updater.stages import upgrade_debian, upgrade_python
from kano_updater.scenarios import PreUpdate, PostUpdate
from kano_updater.utils import get_dpkg_dict, set_update_status, \
    expand_rootfs, get_installed_version, reboot, reboot_required, \
    update_failed, launch_gui, launch_gui_if_not_running, set_gui_stage, \
    kill_gui, update_home_folders_from_skel
from kano.utils import run_cmd, delete_file, is_gui, run_cmd_log


def check_for_multiple_instances():
    cmd = 'pgrep -f "python /usr/bin/kano-updater" -l | grep -v pgrep'
    o, _, _ = run_cmd(cmd)
    num = len(o.splitlines())
    logger.debug('Total number of kano-updater processes: {}'.format(num))
    if num > 1:
        logger.error('Exiting kano-updater as there is an other instance already running!')
        logger.debug(o)
        sys.exit()


def root_check():
    user = os.environ['LOGNAME']
    if user != 'root':
        title = 'Error!'
        description = 'kano-updater must be executed with root privileges'
        logger.error(description)

        if is_gui:
            kdialog = kano_dialog.KanoDialog(title, description)
            kdialog.run()
        else:
            print description

        sys.exit(1)

# Import gtk3 module only if gui
is_gui = is_gui()
if is_gui:
    from kano.gtk3 import kano_dialog

debug = False
logger.force_log_level("info")

check_for_multiple_instances()
root_check()

issue_file = "/etc/issue"
version_file = "/etc/kanux_version"

new_version = OSVersion("Kanux", "Beta", "1.1.1")
if os.path.exists(version_file):
    old_version = OSVersion.from_version_file(version_file)
else:
    old_version = new_version

python_modules_file = '/usr/share/kano-updater/python_modules'

require_restart = ['kdesk', 'raspberrypi-linux', 'raspberrypi-firmware',
                   'kano-updater', 'kano-settings', 'kano-desktop']

# clean system logs
# TODO: This should be moved to a cron job
cleanup()

preup = PreUpdate(old_version, new_version)
postup = PostUpdate(old_version, new_version)
if not (preup.covers_update() and postup.covers_update()):
    title = 'Unfortunately, your version of Kano OS is too old ' + \
            'to be updated through the updater.'
    description = 'You will need to download the image of the ' + \
                  'OS and reflash your SD card.'
    if is_gui:
        kdialog = kano_dialog.KanoDialog(title, description)
        kdialog.run()
    sys.exit(title)

logger.info("Upgrading from: {}".format(str(old_version)))
logger.info("Upgrading to: {}".format(str(new_version)))

# Read flags
upgradePython = (len(sys.argv) == 2 and sys.argv[1] == 'python_upgrade')
forceUpdate = (len(sys.argv) == 2 and sys.argv[1] in ['-f', '--force'])
showDialogue = not (len(sys.argv) == 2 and sys.argv[1] in ['-n', '--noDialogue'])
debug = (len(sys.argv) == 2 and sys.argv[1] in ['-d', '--debug'])

# upgrade python command line
if upgradePython:
    appstate_before, _ = get_dpkg_dict()
    upgrade_python(python_modules_file, appstate_before)
    sys.exit()

# ask confirmation from user
if not forceUpdate and showDialogue:
    title = "Are you sure?"
    description = "Do you want to update Kanux?"
    if is_gui:
        kdialog = kano_dialog.KanoDialog(title, description, {"OK": {"return_value": 0}, "CANCEL": {"return_value": -1}})
        response = kdialog.run()
        if response != 0:
            logger.info("Canceled by the user.")
            sys.exit()
    else:
        print description + " [y/n]"
        answer = raw_input().lower()
        if answer != 'y':
            logger.info("Canceled by the user.")
            sys.exit()

# no internet warning
if not is_internet():
    title = "No internet connection detected"
    description = "Please connect to internet using the cable\n"
    description += "or the WiFi utility in Apps"
    if is_gui:
        kdialog = kano_dialog.KanoDialog(title, description)
        kdialog.run()
    else:
        print title
        print 'Press any key to continue'
        answer = raw_input()

    logger.warn(title)
else:  # do upgrade
    # Remove comunication file
    if os.path.isfile("/tmp/updater-progress"):
        os.remove("/tmp/updater-progress")

    # kill_apps
    kill_apps_list = ['minecraft-pi', 'make-music', 'make-video', 'make-snake', 'kano-apps']
    for app in kill_apps_list:
        run_cmd('killall -q {}'.format(app))

    # Start gui
    gui_process = launch_gui()

    run_cmd_log('apt-get -y clean')
    _, _, rv = run_cmd_log('apt-get -y update')
    #kill_child_processes(progress_bar)
    if rv != 0:
        kill_gui(gui_process)
        update_failed("Could not download the package lists")

    # upgrade kano-updater itself
    gui_process = launch_gui_if_not_running(gui_process)
    set_gui_stage(2)

    current_updater_version = get_installed_version('kano-updater')

    cmd = 'apt-get install -o Dpkg::Options::="--force-confdef" ' + \
          '-o Dpkg::Options::="--force-confold" -y --force-yes kano-toolset kano-updater'
    _, _, rv = run_cmd_log(cmd)

    if rv != 0:
        kill_gui(gui_process)
        update_failed("Couldn't update the updater!")

    new_updater_version = get_installed_version('kano-updater')
    # re-run the updater in case it was updated
    if new_updater_version != current_updater_version and not debug:
        logger.info("The updater was reinstalled, launching again.")
        kill_gui(gui_process)
        flag = '-f'
        if not showDialogue:
            flag = '-n'

        logging.flush()
        os.execvp('kano-updater', ['kano-updater', flag])

    # get app-state before upgrading
    appstate_before, _ = get_dpkg_dict()

    # pre upgrade
    preup.run()

    # upgrade python
    gui_process = launch_gui_if_not_running(gui_process)
    set_gui_stage(3)

    python_ok, python_err = upgrade_python(python_modules_file, appstate_before)

    # upgrade debian
    debian_err_packages = upgrade_debian(gui_process)

    # post upgrade
    postup.run()

    # housekeeping
    update_home_folders_from_skel()

    # refresh desktop
    os.system('kdesk -r')

    bump_system_version(new_version, version_file, issue_file)

    # Kill gui when finished
    kill_gui(gui_process)

    now = int(time.time())
    status = {"last_update": now, "update_available": 0, "last_check": now}
    set_update_status(status)

    # get app-state after upgrading
    appstate_after, appstate_after_nonclean = get_dpkg_dict()

    pkgs_changed = []
    msg_upgraded = ''
    msg_added = ''
    msg_removed = ''

    # compare appstates
    for app, version in appstate_after.iteritems():
        if app in appstate_before and version != appstate_before[app]:
            pkgs_changed.append(app)
            msg_upgraded += "{}: {} -> {}\n".format(
                app,
                appstate_before[app],
                version
            )

        if app not in appstate_before:
            pkgs_changed.append(app)
            msg_added += "{}: {}\n".format(app, version)

    for app, version in appstate_before.iteritems():
        if app not in appstate_after:
            pkgs_changed.append(app)
            msg_removed += "{}\n".format(app)

    msg = ''
    if msg_upgraded:
        msg += "* apps upgraded:\n" + msg_upgraded

    if msg_added:
        msg += "* apps added:\n" + msg_added

    if msg_removed:
        msg += "* apps removed:\n" + msg_removed

    if debian_err_packages:
        msg += "* apps with errors:\n{}\n".format('\n'.join(debian_err_packages))

    if appstate_after_nonclean:
        non_clean_list = '\n'.join(appstate_after_nonclean.iterkeys())
        msg += "* apps with non-clean state:\n{}\n".format(non_clean_list)

    if python_ok:
        msg += "* python modules upgraded:\n{}\n".format('\n'.join(python_ok))

    if python_err:
        err_list = '\n'.join(python_err)
        msg += "* python modules with error:\n{}\n".format(err_list)
    if not msg:
        msg = "No updates needed this time."

    logger.info(msg)

    if is_gui:
        # Play sound in the background
        from kano.utils import play_sound
        play_sound('/usr/share/kano-media/sounds/kano_updated.wav', background=True)

        # Display message
        if showDialogue:
            filename = 'msg'
            with open(filename, 'w') as outfile:
                outfile.write(msg)

            kdialog = kano_dialog.KanoDialog("Update result", "", scrolled_text=msg, global_style=True)
            kdialog.run()
            delete_file(filename)
    else:
        print msg
        print 'Press any key to continue'
        answer = raw_input()

    try:
        from kano_profile.badges import increment_app_state_variable_with_dialog
        increment_app_state_variable_with_dialog('kano-updater', 'updated', 1)
    except Exception:
        pass

# expand filesystem
will_expand = expand_rootfs()
if showDialogue and (will_expand or reboot_required(require_restart, pkgs_changed)):
    title = "Your computer needs to restart"
    description = "Then it will be able to use all the new features it just downloaded. See you in a minute!"
    logger.info("Rebooting")
    reboot(title, description)
