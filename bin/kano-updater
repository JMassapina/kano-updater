#!/usr/bin/env python

# kano-updater
#
# Copyright (C) 2014 Kano Computing Ltd.
# License: http://www.gnu.org/licenses/gpl-2.0.txt GNU General Public License v2
#
# Updates system packages, Python modules and expands root partition if needed
# Usage:
# sudo kano-updater > shows confirmation and reboot dialogue
# sudo kano-updater -f > shows reboot dialogue
# sudo kano-updater -n > no dialogues
# sudo kano-updater -d > debug mode

import os
import sys
import time

from gi.repository import Gtk, Pango

if __name__ == '__main__' and __package__ is None:
    dir_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
    if dir_path != '/usr':
        sys.path.insert(0, dir_path)

from kano.logging import logger, cleanup
from kano_updater.osversion import OSVersion, bump_system_version
from kano_updater.stages import upgrade_debian, upgrade_python
from kano_updater.scenarios import PreUpdate, PostUpdate
from kano_updater.utils import get_dpkg_dict, set_update_status, \
    expand_rootfs, get_installed_version, reboot, reboot_required, \
    update_failed, launch_gui, launch_gui_if_not_running, set_gui_stage, \
    kill_gui, update_home_folders_from_skel, check_for_multiple_instances, root_check, \
    check_internet, add_text_to_end
from kano.utils import run_cmd, delete_file, is_gui, run_cmd_log
from kano.network import is_internet
from kano.gtk3 import kano_dialog
from kano.gtk3.scrolled_window import ScrolledWindow

logger.force_log_level("info")
check_for_multiple_instances()
root_check()

issue_file = "/etc/issue"
version_file = "/etc/kanux_version"

new_version = OSVersion("Kanux", "Beta", "1.2.2")
if os.path.exists(version_file):
    old_version = OSVersion.from_version_file(version_file)
else:
    old_version = new_version


require_restart = ['kdesk', 'raspberrypi-linux', 'raspberrypi-firmware',
                   'kano-updater', 'kano-settings', 'kano-desktop']


# Read flags
forceUpdate = (len(sys.argv) == 2 and sys.argv[1] in ['-f', '--force'])
showDialogue = not (len(sys.argv) == 2 and sys.argv[1] in ['-n', '--noDialogue'])
debug = (len(sys.argv) == 2 and sys.argv[1] in ['-d', '--debug'])

if not is_gui():
    sys.exit('You need to run kano-updater from a GUI session!')


# Track application usage only after we are ok to proceed (root permissions & gui enabled)
try:
    from kano_profile.tracker import Tracker
    kanotracker = Tracker()
except:
    pass

# clean system logs
# TODO: This should be moved to a cron job
cleanup()

preup = PreUpdate(old_version, new_version)
postup = PostUpdate(old_version, new_version)
if not (preup.covers_update() and postup.covers_update()):
    title = 'Unfortunately, your version of Kano OS is too old ' + \
            'to be updated through the updater.'
    description = 'You will need to download the image of the ' + \
                  'OS and reflash your SD card.'
    kdialog = kano_dialog.KanoDialog(title, description)
    kdialog.dialog.set_icon_name("kano-updater")
    kdialog.dialog.set_title("Kano Updater")
    kdialog.run()
    sys.exit(title)

logger.info("Upgrading from: {}".format(str(old_version)))
logger.info("Upgrading to: {}".format(str(new_version)))

# ask confirmation from user
if not forceUpdate and showDialogue:
    title = "Let\'s update!"
    description = "Your Kano is about to get better"
    kdialog = kano_dialog.KanoDialog(
        title,
        description,
        button_dict={"UPDATE NOW": {"return_value": 0}},
        orange_info={"name": "Later", "return_value": 1}
    )
    kdialog.dialog.set_icon_name("kano-updater")
    kdialog.dialog.set_title("Kano Updater")
    response = kdialog.run()
    if response != 0:
        logger.info("Canceled by the user.")
        sys.exit()

    del kdialog
    while Gtk.events_pending():
        Gtk.main_iteration()

# main update if there is internet
pkgs_changed = []

if check_internet():

    # Remove comunication file
    if os.path.isfile("/tmp/updater-progress"):
        os.remove("/tmp/updater-progress")

    # kill_apps
    kill_apps_list = ['minecraft-pi', 'make-music', 'make-video', 'make-snake', 'kano-apps']
    for app in kill_apps_list:
        run_cmd('killall -q {}'.format(app))

    # Start gui
    gui_process = launch_gui()

    run_cmd_log('dpkg --configure -a')
    run_cmd_log('apt-get -y clean')
    run_cmd_log('apt-get -y update')
    # update always return 0, even if there are errors

    # upgrade kano-updater itself
    gui_process = launch_gui_if_not_running(gui_process)
    set_gui_stage(2)

    current_updater_version = get_installed_version('kano-updater')

    cmd = 'apt-get install -o Dpkg::Options::="--force-confdef" ' + \
          '-o Dpkg::Options::="--force-confold" -y --force-yes kano-toolset kano-updater'
    _, _, rv = run_cmd_log(cmd)

    if rv != 0:
        kill_gui(gui_process)
        msg = "Couldn't update the updater!"
        update_failed(msg)
        sys.exit(msg)

    new_updater_version = get_installed_version('kano-updater')
    # re-run the updater in case it was updated
    if new_updater_version != current_updater_version and not debug:
        logger.info("The updater was reinstalled, launching again.")
        kill_gui(gui_process)
        flag = '-f'
        if not showDialogue:
            flag = '-n'

        logger.flush()
        os.execvp('kano-updater', ['kano-updater', flag])

    # get app-state before upgrading
    appstate_before, _ = get_dpkg_dict()

    # pre upgrade
    try:
        preup.run()
    except Exception as e:
        kill_gui(gui_process)
        sys.exit(e)

    # upgrade python
    gui_process = launch_gui_if_not_running(gui_process)
    set_gui_stage(3)

    # if internet connection is lost during update, do not continue
    if not is_internet():
        kdialog = kano_dialog.KanoDialog('Error!', 'Internet connection lost!')
        kdialog.dialog.set_icon_name("kano-updater")
        kdialog.dialog.set_title("Kano Updater")
        kdialog.run()
        logger.error('Internet connection lost before Python upgrades!')
        kill_gui(gui_process)
        sys.exit()

    python_ok, python_err = upgrade_python(appstate_before)

    # upgrade debian
    debian_err_packages = upgrade_debian(gui_process)

    # check for download error
    if debian_err_packages == -1:
        title = 'Error with downloading packages!'
        kdialog = kano_dialog.KanoDialog(title, '')
        kdialog.dialog.set_icon_name("kano-updater")
        kdialog.dialog.set_title("Kano Updater")
        kdialog.run()
        kill_gui(gui_process)
        sys.exit(title)

    # post upgrade
    try:
        postup.run()
    except Exception as e:
        kill_gui(gui_process)
        sys.exit(e)

    # housekeeping
    update_home_folders_from_skel()

    # refresh desktop
    os.system('kdesk -r')

    bump_system_version(new_version, version_file, issue_file)

    # Kill gui when finished
    kill_gui(gui_process)

    now = int(time.time())
    status = {"last_update": now, "update_available": 0, "last_check": now}
    set_update_status(status)

    # get app-state after upgrading
    appstate_after, appstate_after_nonclean = get_dpkg_dict()

    msg_upgraded = ''
    msg_added = ''
    msg_removed = ''

    # compare appstates
    for app, version in appstate_after.iteritems():
        if app in appstate_before and version != appstate_before[app]:
            pkgs_changed.append(app)
            msg_upgraded += " - {}\n".format(app)

        if app not in appstate_before:
            pkgs_changed.append(app)
            msg_added += " - {}\n".format(app)

    for app, version in appstate_before.iteritems():
        if app not in appstate_after:
            pkgs_changed.append(app)
            msg_removed += " - {}\n".format(app)

    msg = ''

    del Gtk
    del Pango
    from gi.repository import Gtk, Gdk, Pango

    # Create Gtk textiew with markdown
    text_view = Gtk.TextView()
    text_view.set_margin_top(10)
    text_view.set_margin_bottom(20)
    text_view.set_margin_left(20)
    text_view.set_margin_right(20)
    text_buffer = text_view.get_buffer()
    bold_tag = text_buffer.create_tag("bold", weight=Pango.Weight.BOLD)

    if msg_upgraded:
        text = "\nApps upgraded:\n"
        add_text_to_end(text_buffer, text, bold_tag)
        add_text_to_end(text_buffer, msg_upgraded)
        msg += text + msg_upgraded

    if msg_added:
        text = "\nApps added:\n"
        add_text_to_end(text_buffer, text, bold_tag)
        add_text_to_end(text_buffer, msg_added)
        msg += text + msg_added

    if msg_removed:
        text = "\nApps removed:\n"
        add_text_to_end(text_buffer, text, bold_tag)
        add_text_to_end(text_buffer, msg_removed)
        msg += text + msg_removed

    if debian_err_packages:
        text = "\nApps with errors:\n"
        add_text_to_end(text_buffer, text, bold_tag)
        msg_error = "{}\n".format('\n'.join(debian_err_packages))
        add_text_to_end(text_buffer, msg_error)
        msg += text + msg_error

    if appstate_after_nonclean:
        text = "\nApps with non-clean state:\n"
        add_text_to_end(text_buffer, text, bold_tag)

        non_clean_list = '\n'.join(appstate_after_nonclean.iterkeys())
        msg_non_clean_list = non_clean_list + "\n"
        add_text_to_end(text_buffer, msg_non_clean_list)
        msg += text + msg_non_clean_list

    if python_ok:
        text = "\nPython modules upgraded:\n"
        add_text_to_end(text_buffer, text, bold_tag)

        python_modules = "{}\n".format('\n'.join(python_ok))
        add_text_to_end(text_buffer, python_modules)
        msg += text + python_modules

    if python_err:
        text = "\nPython modules with error:\n"
        add_text_to_end(text_buffer, text, bold_tag)

        err_list = '\n'.join(python_err)
        msg_python_err = err_list + "\n"
        add_text_to_end(text_buffer, msg_python_err)
        msg = text + msg_python_err

    if not msg:
        msg = "No updates needed this time."
        add_text_to_end(text_buffer, msg, bold_tag)

    logger.info(msg)

    # Play sound in the background
    from kano.utils import play_sound
    play_sound('/usr/share/kano-media/sounds/kano_updated.wav', background=True)

    # Display message
    if showDialogue:
        filename = 'msg'
        with open(filename, 'w') as outfile:
            outfile.write(msg)

        scrolled_window = ScrolledWindow()
        scrolled_window.add_with_viewport(text_view)
        scrolled_window.set_policy(Gtk.PolicyType.NEVER, Gtk.PolicyType.AUTOMATIC)
        scrolled_window.set_size_request(400, 200)

        kdialog = kano_dialog.KanoDialog("Update result", "", widget=scrolled_window, global_style=True)
        kdialog.dialog.set_icon_name("kano-updater")
        kdialog.dialog.set_title("Kano Updater")
        kdialog.run()
        delete_file(filename)

    try:
        from kano_profile.badges import increment_app_state_variable_with_dialog
        increment_app_state_variable_with_dialog('kano-updater', 'updated', 1)
    except Exception:
        pass

# expand filesystem
will_expand = expand_rootfs()
if showDialogue and (will_expand or reboot_required(require_restart, pkgs_changed)):
    title = "Update successful!"
    description = "Now we just need to do a quick reboot. See you in a minute!"
    logger.info("Rebooting")
    reboot(title, description)
