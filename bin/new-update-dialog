#!/usr/bin/env python

# Copyright (C) 2014 Kano Computing Ltd.
# License: http://www.gnu.org/licenses/gpl-2.0.txt GNU General Public License v2
#
# Checks for updates of packages that are maintained by Kano
#
from kano_updater.utils import get_update_status
#from kano.gtk3 import kano_dialog
import os
import subprocess
import sys
if __name__ == '__main__' and __package__ is None:
    dir_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
    if dir_path != '/usr':
        sys.path.insert(1, dir_path)

from kano_profile.badges import load_badge_rules
from kano.gtk3.buttons import KanoButton, OrangeButton
from kano.gtk3.heading import Heading
from gi.repository import Gtk, Gdk
from kano.paths import common_css_dir

all_rules = load_badge_rules()
categories = ['badges', 'avatars', 'environments']

update_image = "/usr/share/kano-updater/images/update-screen.png"


class MainWindow(Gtk.Window):
    def __init__(self):
        Gtk.Window.__init__(self, title='Kano-New-Update')

        common_css = Gtk.CssProvider()
        colour_css = Gtk.CssProvider()
        common_css_file = os.path.join(common_css_dir, 'common.css')
        if not os.path.exists(common_css_file):
            sys.exit('CSS file missing!')
        colour_css_file = os.path.join(common_css_dir, 'colours.css')
        if not os.path.exists(colour_css_file):
            sys.exit('CSS file missing!')
        colour_css.load_from_path(colour_css_file)
        common_css.load_from_path(common_css_file)

        screen = Gdk.Screen.get_default()
        styleContext = Gtk.StyleContext()
        styleContext.add_provider_for_screen(screen, colour_css, Gtk.STYLE_PROVIDER_PRIORITY_USER)
        styleContext.add_provider_for_screen(screen, common_css, Gtk.STYLE_PROVIDER_PRIORITY_USER)

        self.image_width = 590
        self.image_height = 270
        self.window_height = 500
        self.set_size_request(self.image_width, self.window_height)
        self.set_decorated(False)
        self.set_resizable(False)
        self.set_position(Gtk.WindowPosition.CENTER)

        # Make sure this window is always above
        self.set_keep_above(True)

        # Header
        self.heading = Heading("Time to update!", "Take a break!  Updating takes about 10 minutes")
        self.heading.description.set_line_wrap(True)

        self.button = KanoButton("UPDATE NOW")
        self.button.connect("clicked", self.update)
        self.later = OrangeButton("Later")
        self.later.connect("clicked", Gtk.main_quit)
        self.button_box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=15)
        self.button_box.pack_start(self.button, False, False, 0)
        self.button_box.pack_start(self.later, False, False, 0)
        self.button_alignment = Gtk.Alignment(xalign=0.5, yalign=0.5, xscale=0, yscale=0)
        self.button_alignment.add(self.button_box)

        self.image = Gtk.Image()
        self.image.set_from_file(update_image)

        self.background = Gtk.EventBox()
        self.background.set_size_request(self.image_width, self.image_height)
        self.background.add(self.image)

        self.box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=0)
        self.box.pack_start(self.background, False, False, 0)
        self.box.pack_start(self.heading.container, False, False, 10)
        self.box.pack_start(self.button_alignment, False, False, 0)

        self.add(self.box)

    def update(self, event=None):
        subprocess.Popen("sudo kano-updater -f &")
        Gtk.main_quit()


new_update = False
try:
    new_update = get_update_status()['update_available'] == 1
except Exception:
    pass

if new_update:
    win = MainWindow()
    win.connect('delete-event', Gtk.main_quit)
    win.show_all()
    Gtk.main()
