#!/usr/bin/env python

# kano-updater
#
# Copyright (C) 2014 Kano Computing Ltd.
# License: http://www.gnu.org/licenses/gpl-2.0.txt GNU General Public License v2
#
# Updates system packages, Python modules and expands root partition if needed
#

import os
import sys
import kano.utils as h
from kanowifilib import is_internet


def upgrade_debian():
    global err_log
    # setting up apt-get for non-interactive mode
    os.environ['DEBIAN_FRONTEND'] = 'noninteractive'

    # apt update
    id = h.zenity_show_progress("Updating package list")
    cmd = 'apt-get -y update'
    h.run_print_output_error(cmd)
    h.kill_child_processes(id)

    # apt upgrade
    id = h.zenity_show_progress("Upgrading packages")
    cmd = 'yes "" | apt-get -y -o Dpkg::Options::="--force-confdef" ' + \
          '-o Dpkg::Options::="--force-confold" dist-upgrade'
    _, debian_err, _ = h.run_print_output_error(cmd)
    err_log += debian_err
    h.kill_child_processes(id)

    # apt autoremove
    id = h.zenity_show_progress("Cleaning up packages")
    cmd = 'apt-get -y autoremove --purge'
    h.run_print_output_error(cmd)

    # apt autoclean
    cmd = 'apt-get -y autoclean'
    h.run_print_output_error(cmd)
    h.kill_child_processes(id)

    # parsing debian error log
    if debian_err:
        err_split = debian_err.splitlines()
        dirs_delete = []
        err_packages = []

        for l in err_split:
            if 'dpkg: warning: unable to delete old directory' in l:
                parts = l.split("'")
                dirs_delete.append(parts[1].strip())

            if 'dpkg: error processing' in l:
                parts = l.split('/var/cache/apt/archives/')
                packagename = parts[1].split()[0].strip()[:-4]
                err_packages.append(packagename)

        # remove left-over non-empty directories
        for dir in dirs_delete:
            h.deletedir(dir)

        # return err_packages
        return err_packages


def upgrade_python():
    id = h.zenity_show_progress("Upgrading Python modules")

    if 'python-pip' in appstate_before or \
       'python-setuptools' in appstate_before:
        # remove old pip and setuptools
        cmd = 'yes "" | apt-get -y purge python-setuptools ' + \
              'python-virtualenv python-pip'
        h.run_print_output_error(cmd)

    # installing/upgrading pip
    o, _, _ = h.run_cmd('pip -V')
    if 'pip 1.' in o:
        cmd = 'pip install --upgrade pip'
        h.run_print_output_error(cmd)
    else:
        cmd = 'wget -q --no-check-certificate ' + \
              'https://raw.github.com/pypa/pip/master/contrib/get-pip.py ' + \
              '-O get-pip.py'
        h.run_cmd(cmd)

        cmd = 'python get-pip.py'
        h.run_print_output_error(cmd)

        h.deletefile('get-pip.py')

    # parse python modules
    python_modules = h.read_file_contents_as_lines(python_modules_file)

    ok_modules = []
    error_modules = []

    for module in python_modules:
        o, e, rc = h.run_cmd('pip install --upgrade {}'.format(module))

        if rc == 0:
            if 'Successfully installed' in o:
                ok_modules.append(module)
        else:
            error_modules.append(module)
    h.kill_child_processes(id)

    return ok_modules, error_modules


def expand_rootfs():
    cmd = '/usr/bin/expand-rootfs'
    _, _, rc = h.run_print_output_error(cmd)
    return rc == 0


def get_installed_version(pkg):
    out, _, _ = h.run_cmd('dpkg-query -s kano-updater | grep "Version:"')
    return out.strip()[9:]


err_log_file = '/var/log/kano-updater-log'
python_modules_file = '/usr/share/kano-updater/python_modules'
pre_update_file = '/usr/share/kano-updater/pre_update'
post_update_file = '/usr/share/kano-updater/post_update'

is_gui = h.is_gui()
kanux_version = h.read_file_contents('/etc/kanux_version')
err_log = 'build version: {}\nupgrade date: {}\n'.format(
    kanux_version,
    h.get_date_now()
)

# root check
user = os.environ['LOGNAME']
if user != 'root':
    msg = 'Error: kano-updater must be executed with root privileges'
    if is_gui:
        h.run_cmd('zenity --info --text "{}"'.format(msg))
    sys.exit(msg)

# upgrade python command line
if len(sys.argv) == 2 and sys.argv[1] == 'python_upgrade':
    appstate_before, _ = h.get_dpkg_dict()
    upgrade_python()
    sys.exit()

# ask confirmation from user
if not (len(sys.argv) == 2 and sys.argv[1] in ['-f', '--force']):
    msg = "Are you sure you want to update Kanux?"
    if is_gui:
        _, _, rc = h.run_cmd('zenity --question --text "{}"'.format(msg))
        if rc != 0:
            sys.exit()
    else:
        print msg + " [y/n]"
        answer = raw_input().lower()
        if answer != 'y':
            sys.exit()

# no internet warning
if not is_internet():
    msg = "No internet connection detected\n"
    msg += "Please connect to internet using the cable "
    msg += "or the WiFi utility in Extras"
    if is_gui:
        h.run_cmd('zenity --info --text "{}"'.format(msg))
    else:
        print msg
        print 'Press any key to continue'
        answer = raw_input()
# do upgrade
else:
    # kill_apps
    kill_apps_list = ['minecraft-pi', 'make-music', 'make-video',
                      'make-snake', 'pcmanfm']
    for app in kill_apps_list:
        h.run_cmd('killall -q {}'.format(app))

    # upgrade kano-updater itself
    current_updater_version = get_installed_version('kano-updater')
    _ = h.run_cmd('apt-get install kano-updater -y --force-yes')
    new_updater_version = get_installed_version('kano-updater')

    if new_updater_version != current_updater_version:
        os.execvp('./kano-updater', ['./kano-updater', '-f'])

    # get app-state before upgrading
    appstate_before, _ = h.get_dpkg_dict()

    # pre upgrade
    h.run_print_output_error(pre_update_file)

    # upgrade python
    python_ok, python_err = upgrade_python()

    # upgrade debian
    debian_err_packages = upgrade_debian()

    # post upgrade
    h.run_print_output_error(post_update_file)

    # get app-state after upgrading
    appstate_after, appstate_after_nonclean = h.get_dpkg_dict()

    msg_upgraded = ''
    msg_added = ''
    msg_removed = ''

    # compare appstates
    for app, version in appstate_after.iteritems():
        if app in appstate_before and version != appstate_before[app]:
            msg_upgraded += "{}: {} -> {}\n".format(
                app,
                appstate_before[app],
                version
            )

        if app not in appstate_before:
            msg_added += "{}: {}\n".format(app, version)

    for app, version in appstate_before.iteritems():
        if app not in appstate_after:
            msg_removed += "{}\n".format(app)

    msg = ''
    if msg_upgraded:
        msg += "* apps upgraded:\n" + msg_upgraded

    if msg_added:
        msg += "* apps added:\n" + msg_added

    if msg_removed:
        msg += "* apps removed:\n" + msg_removed

    if debian_err_packages:
        msg += "* apps with errors:\n{}\n".format('\n'.join(debian_err_packages))

    if appstate_after_nonclean:
        non_clean_list = '\n'.join(appstate_after_nonclean.iterkeys())
        msg += "* apps with non-clean state:\n{}\n".format(non_clean_list)

    if python_ok:
        msg += "* python modules upgraded:\n{}\n".format('\n'.join(python_ok))

    if python_err:
        err_list = '\n'.join(python_err)
        msg += "* python modules with error:\n{}\n".format(err_list)

    # write error log
    err_log += '\n' + msg + '\n'
    with open(err_log_file, 'w') as outfile:
        outfile.write(err_log)

    if is_gui:
        with open('msg', 'w') as outfile:
            outfile.write(msg)
        h.run_cmd('zenity --text-info --title="Update result" --filename=msg')
        h.deletefile('msg')
    else:
        print msg
        print 'Press any key to continue'
        answer = raw_input()

# expand filesystem
if expand_rootfs():
    msg = "Disk partition scheduled for resize.\n"
    msg += "Rebooting the system, see you in 1 minute!"
    if is_gui:
        h.run_cmd('zenity --info --text "{}"'.format(msg))
    else:
        print msg
        print 'Press any key to continue'
        answer = raw_input()
    h.run_cmd('reboot')
